{"version":3,"sources":["components/card.component.js","components/card-list.component.js","search-box/search-box.component.js","App.js","serviceWorker.js","Example.js","index.js"],"names":["Card","monster","className","src","id","alt","name","email","CardList","monsters","map","idx","key","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","axios","get","data","console","log","this","setState","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","Boolean","window","location","hostname","match","Example","props","count","document","title","onClick","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4WAGaA,G,MAAO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACrB,OACE,yBAAKC,UAAU,kBACb,yBAAKC,IAAG,+BAA0BF,EAAQG,GAAlC,0BAA8DC,IAAKJ,EAAQK,OACnF,4BAAKL,EAAQK,MACb,2BAAIL,EAAQM,UCQHC,EAZE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClB,OACE,yBAAKP,UAAU,aAEXO,EAASC,KAAI,SAACT,EAASU,GAAV,OACX,kBAAC,EAAD,CAAMC,IAAKD,EAAKV,QAASA,SCEpBY,G,YARG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,OACE,6BACE,2BAAOb,UAAU,SAASc,KAAK,SAASF,YAAaA,EAAaG,SAAUF,OCA7DG,E,kDACnB,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXV,SAAU,GACVW,YAAa,IALH,E,kMAUWC,IAAMC,IAAN,8C,gBAAfC,E,EAAAA,KACRC,QAAQC,IAAIF,GACZG,KAAKC,SAAS,CACZlB,SAAUc,I,qIAIJ,IAAD,SAC2BG,KAAKP,MAA/BV,EADD,EACCA,SAAUW,EADX,EACWA,YACZQ,EAAmBnB,EAASoB,QAAO,SAAA5B,GACvC,OAAOA,EAAQK,KAAKwB,cAAcC,SAASX,EAAYU,kBAEzD,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,CAAWY,YAAY,kBAAkBC,aAAc,SAACiB,GACtD,EAAKL,SAAS,CAAEP,YAAaY,EAAEC,OAAOC,QAAS,WAC7CV,QAAQC,IAAI,EAAKN,aAGrB,kBAAC,EAAD,CAAUV,SAAUmB,S,GA9BKO,aCMbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICjBeC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDvB,MAAQ,CACXwB,MAAO,GAHQ,E,gEAQjBnB,QAAQC,IAAR,sBAA2BC,KAAKP,MAAMwB,MAAtC,WACAC,SAASC,MAAT,sBAAgCnB,KAAKP,MAAMwB,MAA3C,Y,2CAGAnB,QAAQC,IAAR,2CAAgDC,KAAKP,MAAMwB,MAA3D,WACAC,SAASC,MAAT,sBAAgCnB,KAAKP,MAAMwB,MAA3C,Y,6CAIAnB,QAAQC,IAAR,6CAAkDC,KAAKP,MAAMwB,MAA7D,WACAC,SAASC,MAAT,sBAAgCnB,KAAKP,MAAMwB,MAA3C,Y,+BAGQ,IAAD,OACP,OACE,6BACE,0CAAgBjB,KAAKP,MAAMwB,MAA3B,UACA,4BAAQG,QAAS,kBAAM,EAAKnB,SAAS,CAAEgB,MAAO,EAAKxB,MAAMwB,MAAQ,MAAjE,iB,GA1B6BR,aCMrCY,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFL,SAASM,eAAe,SFuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.b0da4b96.chunk.js","sourcesContent":["import React from 'react'\nimport './card-list.style.css'\n\nexport const Card = ({ monster }) => {\n  return (\n    <div className='card-container'>\n      <img src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} alt={monster.name} />\n      <h2>{monster.name}</h2>\n      <p>{monster.email}</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport './card-list.style.css';\nimport { Card } from './card.component';\n\nconst CardList = ({ monsters }) => {\n  return (\n    <div className='card-list'>\n      {\n        monsters.map((monster, idx) => (\n          <Card key={idx} monster={monster} />\n        ))\n      }\n    </div>\n  )\n}\n\nexport default CardList","import React from 'react'\nimport './search-box.style.css';\n\nconst SearchBox = ({ placeholder, handleChange }) => {\n  return (\n    <div>\n      <input className='search' type='search' placeholder={placeholder} onChange={handleChange} />\n    </div>\n  )\n}\n\nexport default SearchBox\n","import React, { Component } from 'react'\nimport axios from 'axios';\nimport CardList from './components/card-list.component';\nimport './App.css';\nimport SearchBox from './search-box/search-box.component';\n\nexport default class App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  async componentDidMount() {\n    const { data } = await axios.get(`https://jsonplaceholder.typicode.com/users`);\n    console.log(data);\n    this.setState({\n      monsters: data\n    });\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return (\n      <div className='App'>\n        <SearchBox placeholder='search monsters' handleChange={(e) => {\n          this.setState({ searchField: e.target.value }, () => {\n            console.log(this.state)\n          })\n        }} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\nexport default class Example extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  componentDidMount() {\n    console.log(`You clicked ${this.state.count} times`)\n    document.title = `You clicked ${this.state.count} times`;\n  }\n  componentDidUpdate() {\n    console.log(`componentDidUpdate - You clicked ${this.state.count} times`)\n    document.title = `You clicked ${this.state.count} times`;\n  }\n\n  componentWillUnmount() {\n    console.log(`componentWillUnmount - You clicked ${this.state.count} times`)\n    document.title = `You clicked ${this.state.count} times`;\n  }\n\n  render() {\n    return (\n      <div>\n        <p>You clicked {this.state.count} times</p>\n        <button onClick={() => this.setState({ count: this.state.count + 1 })}>\n          Click me\n        </button>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Example from './Example';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <Example />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}